"""
Audio Input Device Handler
X·ª≠ l√Ω microphone v√† audio recording cho c√°c module kh√°c s·ª≠ d·ª•ng
"""

import sounddevice as sd
import logging
import queue
import numpy as np
import soundfile as sf
import os
from datetime import datetime
import threading
import time

# Setup logging
logger = logging.getLogger(__name__)

# Audio config
SAMPLE_RATE = 16000  # Standard for speech recognition
CHANNELS = 1
CHUNK_SIZE = 1024
DTYPE = 'float32'


class AudioInputDevice:
    def __init__(self, input_device_index=None, save_recording=False):
        """
        Initialize audio input device
        
        Args:
            input_device_index: Index c·ªßa device ƒë·ªÉ s·ª≠ d·ª•ng (None = default)
            save_recording: C√≥ l∆∞u audio th√†nh file WAV kh√¥ng
        """
        self.input_device_index = input_device_index
        self.save_recording = save_recording
        
        # Audio setup
        self.stream = None
        self.audio_queue = queue.Queue(maxsize=100)
        self.is_recording = False
        
        # Recording buffer (n·∫øu c·∫ßn l∆∞u file)
        self.audio_buffer = []
        self.recording_filename = f"recording_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav"
        
        # Frame callback (cho wakeword detection)
        self.frame_callback = None
        
        self._setup_audio_device()
    
    def _setup_audio_device(self):
        """Setup audio device v√† ki·ªÉm tra"""
        try:
            # Set environment for WSL
            os.environ['PULSE_SERVER'] = 'unix:/mnt/wslg/PulseServer'
            
            # List available devices
            logger.info("üé§ Available input devices:")
            devices = sd.query_devices()
            for i, device in enumerate(devices):
                if device['max_input_channels'] > 0:
                    logger.info(f"   Device {i}: {device['name']} (Channels: {device['max_input_channels']})")
            
            # Get device info
            if self.input_device_index is not None:
                device_info = sd.query_devices(self.input_device_index)
                logger.info(f"üé§ Using device {self.input_device_index}: {device_info['name']}")
            else:
                self.input_device_index = sd.default.device[0]
                device_info = sd.query_devices(self.input_device_index)
                logger.info(f"üé§ Using default input device: {device_info['name']} (Index: {self.input_device_index})")
                
        except Exception as e:
            logger.error(f"‚ùå Audio device setup error: {e}")
            raise
    
    def audio_callback(self, indata, frames, time, status):
        """Audio input callback"""
        if status:
            logger.warning(f"Audio callback status: {status}")
        
        if self.is_recording:
            # Put in queue for streaming
            if not self.audio_queue.full():
                self.audio_queue.put(indata.copy())
            
            # Save to buffer n·∫øu c·∫ßn
            if self.save_recording:
                self.audio_buffer.append(indata.copy())
            
            # Call frame callback cho wakeword detection
            if self.frame_callback:
                # Convert float32 to int16 cho wakeword
                audio_int16 = (indata * 32767).astype(np.int16)
                self.frame_callback(audio_int16)
    
    def start_recording(self):
        """B·∫Øt ƒë·∫ßu recording"""
        try:
            # Create stream
            try:
                self.stream = sd.InputStream(
                    samplerate=SAMPLE_RATE,
                    channels=CHANNELS,
                    dtype=DTYPE,
                    device=self.input_device_index,
                    blocksize=CHUNK_SIZE,
                    callback=self.audio_callback
                )
            except Exception as stream_error:
                logger.warning(f"‚ö†Ô∏è Failed with specified device, trying default: {stream_error}")
                self.stream = sd.InputStream(
                    samplerate=SAMPLE_RATE,
                    channels=CHANNELS,
                    dtype=DTYPE,
                    blocksize=CHUNK_SIZE,
                    callback=self.audio_callback
                )
            
            self.is_recording = True
            self.stream.start()
            logger.info("üé§ Audio recording started")
            
            if self.save_recording:
                logger.info(f"üéµ Recording will be saved as: {self.recording_filename}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start audio recording: {e}")
            raise
    
    def stop_recording(self):
        """D·ª´ng recording"""
        self.is_recording = False
        
        if self.stream:
            self.stream.stop()
            self.stream.close()
            self.stream = None
        
        # L∆∞u file WAV n·∫øu c·∫ßn
        if self.save_recording and len(self.audio_buffer) > 0:
            self._save_audio_to_wav()
        
        logger.info("üîá Audio recording stopped")
    
    def _save_audio_to_wav(self):
        """L∆∞u audio buffer th√†nh file WAV"""
        try:
            # K·∫øt h·ª£p t·∫•t c·∫£ audio chunks
            audio_data = np.concatenate(self.audio_buffer, axis=0)
            
            # L∆∞u th√†nh file WAV
            sf.write(self.recording_filename, audio_data, SAMPLE_RATE)
            logger.info(f"üíæ Audio saved to: {self.recording_filename}")
            
        except Exception as e:
            logger.error(f"‚ùå Error saving audio file: {e}")
    
    def get_audio_frame(self):
        """
        L·∫•y 1 frame audio cho wakeword detection
        Returns: numpy array (float32) ho·∫∑c None n·∫øu kh√¥ng c√≥ data
        """
        try:
            if not self.audio_queue.empty():
                return self.audio_queue.get_nowait()
            return None
        except queue.Empty:
            return None
    
    def get_audio_frame_int16(self):
        """
        L·∫•y 1 frame audio format int16 cho wakeword detection
        Returns: numpy array (int16) ho·∫∑c None n·∫øu kh√¥ng c√≥ data
        """
        frame = self.get_audio_frame()
        if frame is not None:
            # Convert float32 to int16
            return (frame * 32767).astype(np.int16)
        return None
    
    def set_frame_callback(self, callback_func):
        """
        Set callback function ƒë·ªÉ x·ª≠ l√Ω real-time audio frames
        callback_func(audio_data_int16) s·∫Ω ƒë∆∞·ª£c g·ªçi cho m·ªói frame
        """
        self.frame_callback = callback_func
    
    def get_audio_for_streaming(self):
        """
        L·∫•y audio data ƒë·ªÉ streaming (cho Gemini Live)
        Returns: numpy array (float32) ho·∫∑c None
        """
        return self.get_audio_frame()
    
    def clear_queue(self):
        """Clear audio queue"""
        while not self.audio_queue.empty():
            try:
                self.audio_queue.get_nowait()
            except queue.Empty:
                break
    
    def __enter__(self):
        """Context manager support"""
        self.start_recording()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager support"""
        self.stop_recording()


# Convenience function cho wakeword.py
def get_audio_frame():
    """
    Global function ƒë·ªÉ l·∫•y audio frame - t∆∞∆°ng th√≠ch v·ªõi wakeword.py
    C·∫ßn c√≥ m·ªôt instance global c·ªßa AudioInputDevice
    """
    global _global_audio_device
    
    if '_global_audio_device' not in globals():
        logger.warning("‚ö†Ô∏è Audio device ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. G·ªçi init_global_audio_device() tr∆∞·ªõc.")
        return None
    
    return _global_audio_device.get_audio_frame_int16()


def init_global_audio_device(device_index=None, save_recording=False):
    """
    Kh·ªüi t·∫°o global audio device cho wakeword.py
    """
    global _global_audio_device
    
    _global_audio_device = AudioInputDevice(
        input_device_index=device_index,
        save_recording=save_recording
    )
    _global_audio_device.start_recording()
    logger.info("üé§ Global audio device initialized")
    
    return _global_audio_device


def cleanup_global_audio_device():
    """
    Cleanup global audio device
    """
    global _global_audio_device
    
    if '_global_audio_device' in globals():
        _global_audio_device.stop_recording()
        del _global_audio_device
        logger.info("üîá Global audio device cleaned up")


# Example usage
if __name__ == "__main__":
    import time
    
    logging.basicConfig(level=logging.INFO)
    
    print("üé§ Testing Audio Input Device...")
    
    # Test 1: Basic usage
    with AudioInputDevice(save_recording=True) as audio_device:
        print("Recording for 5 seconds...")
        time.sleep(5)
        
        # Test getting frames
        frame_count = 0
        for i in range(10):
            frame = audio_device.get_audio_frame_int16()
            if frame is not None:
                frame_count += 1
            time.sleep(0.1)
        
        print(f"Got {frame_count} audio frames")
    
    print("‚úÖ Test completed!")
